{
  "_from": "node-plantuml@0.7.0",
  "_id": "node-plantuml@0.7.0",
  "_inBundle": false,
  "_integrity": "sha512-OPc5xwICsNzvUWMFfdd4PMtpG4bx4UNPU4s/ByWhCuY/6FUWUipRBhAxRaeLUBxewdBPBvjWkL5dYntNgDvfMw==",
  "_location": "/node-plantuml",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "node-plantuml",
    "fetchSpec": "0.7.0",
    "name": "node-plantuml",
    "raw": "node-plantuml@0.7.0",
    "rawSpec": "0.7.0",
    "registry": true,
    "saveSpec": null,
    "type": "version"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/node-plantuml/-/node-plantuml-0.7.0.tgz",
  "_shasum": "12192881008820f6cfb7dbbe20dc84162e3cfb23",
  "_spec": "node-plantuml@0.7.0",
  "_where": "C:\\Users\\choke\\source\\repos\\BMSOGOFollowChecker\\docs\\docsMng",
  "author": {
    "email": "mackanhedvall@gmail.com",
    "name": "Markus Hedvall"
  },
  "bin": {
    "puml": "index.js"
  },
  "bugs": {
    "url": "https://github.com/markushedvall/node-plantuml/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "commander": "^2.8.1",
    "node-nailgun-client": "^0.1.0",
    "node-nailgun-server": "^0.1.3",
    "plantuml-encoder": "^1.2.5"
  },
  "deprecated": false,
  "description": "A Node.js module and CLI for running PlantUML",
  "devDependencies": {
    "chai": "^3.2.0",
    "mocha": "^5.x",
    "shelljs": "^0.5.3",
    "standard": "^11.x"
  },
  "engines": {
    "node": ">= 6.x"
  },
  "homepage": "https://github.com/markushedvall/node-plantuml#readme",
  "keywords": [
    "plantuml",
    "uml",
    "diagram"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "node-plantuml",
  "optionalDependencies": {},
  "plantumlVersion": "1.2018.9",
  "readme": "# node-plantuml\n\nA Node.js module and CLI for running [PlantUML](http://plantuml.sourceforge.net/).\n\n[![npm Version](https://img.shields.io/npm/v/node-plantuml.svg)](https://www.npmjs.com/package/node-plantuml) [![Build Status](https://travis-ci.org/markushedvall/node-plantuml.svg)](https://travis-ci.org/markushedvall/node-plantuml) [![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](https://github.com/feross/standard)\n\n[PlantUML](http://plantuml.sourceforge.net/) is a popular diagramming tool that uses simple textual descriptions to draw UML diagrams. With the API provided by this module you can easily generate PlantUML diagrams directly from your Node.js application. It can also be used to encode and decode PlantUML source files.\n\nThis module also provides an easy to use and flexible command line interface for doing the same kind of operations as enabled by the API.\n\nInstall [Graphviz](http://www.graphviz.org/) to be able to generate all diagram types.\n\n# Install\n\n```\nnpm install node-plantuml\n```\n\nIf you want to use the CLI node-plantuml can be install it globally:\n\n```\nnpm install node-plantuml -g\n```\n\n# Example\n\nDiagrams can be created from source files.\n\n```javascript\nvar plantuml = require('node-plantuml');\nvar fs = require('fs');\n\nvar gen = plantuml.generate(\"input-file\");\ngen.out.pipe(fs.createWriteStream(\"output-file.png\");\n```\n\nIf your application will be making multiple PlantUML requests, it might be a good idea to enable the usage of Nailgun.\n\nFollowing is an example of a simple web server for generating images from encoded PlantUML source.\n\n```javascript\nvar express = require('express');\nvar plantuml = require('node-plantuml');\n\nvar app = express();\n\nplantuml.useNailgun(); // Activate the usage of Nailgun\n\napp.get('/png/:uml', function(req, res) {\n  res.set('Content-Type', 'image/png');\n\n  var decode = plantuml.decode(req.params.uml);\n  var gen = plantuml.generate({format: 'png'});\n\n  decode.out.pipe(gen.in);\n  gen.out.pipe(res);\n});\n\napp.get('/svg/:uml', function(req, res) {\n  res.set('Content-Type', 'image/svg+xml');\n\n  var decode = plantuml.decode(req.params.uml);\n  var gen = plantuml.generate({format: 'svg'});\n\n  decode.out.pipe(gen.in);\n  gen.out.pipe(res);\n});\n\napp.listen(8080);\n```\n\n# CLI\n\nThe node-plantuml CLI can be accessed with the puml command.\n```shell\npuml generate file.puml -o file.png\n```\n\nIt's also possible to use stdin and stdout for input and output.\n```shell\npuml decode UDfpLD2rKt0200GS0Iy0 | puml generate > file.png\n```\n\nSimple textual one-liners can also be used as input.\n```shell\npuml generate --unicode --text \"A -> B: Hello\"\n    ┌─┐          ┌─┐\n    │A│          │B│\n    └┬┘          └┬┘\n     │   Hello    │\n     │───────────>│\n    ┌┴┐          ┌┴┐\n    │A│          │B│\n    └─┘          └─┘\n```\n\nThere are multiple options for input and for output. And the output can be in multiple different formats.\n```\nUsage: puml [options] [command]\n\n\nCommands:\n\n  generate [options] [file]  Generate an UML diagram from PlantUML source\n  encode [options] [file]    Encodes PlantUML source\n  decode <url>               Decodes PlantUML source\n  testdot                    Test the installation of Graphviz dot\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n```\n\n```\nUsage: generate [options] [file]\n\nGenerate an UML diagram from PlantUML source\n\nOptions:\n\n  -h, --help            output usage information\n  -p, --png             ouput an UML diagram as a PNG image\n  -s, --svg             ouput an UML diagram as an SVG image\n  -e, --eps             ouput an UML diagram as an EPS image\n  -u, --unicode         ouput an UML diagram in unicode text\n  -a, --ascii           ouput an UML diagram in ASCII text\n  -o --output [file]    the file in which to save the diagram\n  -c, --config [file]   config file read before the diagram\n  -t, --text [text]     UML text to generate from\n  -d, --dot [file]      specify Graphviz dot executable\n  -i, --include [path]  specify the path to include from\n  -C, --charset [charset]  specify the charset of PlantUML source\n```\n\n```\nUsage: encode [options] [file]\n\nEncodes PlantUML source\n\nOptions:\n\n  -h, --help         output usage information\n  -t, --text [text]  UML text to encode\n```\n\n```\nUsage: decode [options] <url>\n\nDecodes PlantUML source\n\nOptions:\n\n  -h, --help  output usage information\n```\n\n# Config templates\n\nWith predefined configuration templates the looks of the diagrams can be altered. For a more classic black and white look the classic configuration template can be used.\n![alt tag](http://www.plantuml.com/plantuml/img/UDgjb3rFmp0GXdV_YjjeGK7C3AWV0qAg0Ab2B2oESqcFkdOvErIbyDznqxfVILi6rhl7zxxlsKd7USc-d6WXBkxH84iDpiyrcKAuCPcfP3a1DvAPdOKQv58x52FA41InqYXsC6CzzgGQ5snBa_MjjWol8_9uo5ZEa5VzdWu7WdXVI-SW8rbKWZKBqu39ukpuYDKKjeXQAdMzPqfBZm_AcY5z8TmS8h0G0Crw05rcEzkT7z2Qva_8DSIF4et24z5SH1RDWv_33P6YgJI-hh7VFk9sG3aEo62pnHSNBbEwKnPBXnNn7ojPBVSfTSYVoDN8g-Mpe7pUQc-1lZMAqMC4ktycUqV9OPc-e_BhlbtpmPyELRAcAZCMv3no7DUANBjgb-OCi9ADJRVIhwT9ak-xpHP4FSD-Fpg_J99jKJo6ZmbIwxsTWCrZlDkw1NWpa8TBY4w1J4Fyy0gqtjIlD_iJ7JJPyX_n2m4TUEG0)\n\nCompared to the standard PlantUML look:\n![alt tag](http://www.plantuml.com/plantuml/img/UDgDaJ4EmZ0CHVUSmcCB2WTWG8NkCB2ofC55GMai9IuI0kuEj4qGAWZM_vzYFwS8h3otZHL2MnK2RAg0_eGUBW9W2exOrESi5xS8bEIqHyO8BlycLr_9RLiTKVFGqy2NPEqZDUIwsEF114OVdyiYbtTrwtu0_TXOXdx-s4RAwo9TGOmTtlku-KJALoZMn0WLCLC3L4Uz-NW5s3ceoITbCEw3FcXbRSfdwNwYGBT__jqTLUUSCW00)\n\n# License\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/markushedvall/node-plantuml.git"
  },
  "scripts": {
    "build": "node nail/build.js",
    "prepublish": "node scripts/get-plantuml-jar.js",
    "test": "standard && node test/fixtures/prepare.js && mocha"
  },
  "version": "0.7.0"
}
